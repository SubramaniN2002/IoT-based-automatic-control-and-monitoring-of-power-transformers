
#include <main.h>
#include "flex_lcd.c"
#use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, ERRORS)
#byte porta  = 0x05
#byte portb  = 0x06
#byte portc  = 0x07
#byte portd  = 0x08
#byte porte  = 0x09
#byte trisa  = 0x85
#byte trisb  = 0x86
#byte trisc  = 0x87
#byte trisd  = 0x88
#byte trise  = 0x89

#bit RELAY = 0x06.7

float temperature=0;
float load=0;
int16 t=0; 
int16 l=0; 

void main()
{
 
trisa=0xff;
trisc=0x80;
//trisb=0x00;
//portb=0xff;
trisb=0x00;
portb=0x00;

lcd_init();
setup_comparator(NC_NC_NC_NC);// This device COMP currently not supported by the PICWizard
lcd_gotoxy(1,1);
lcd_putc("    IOT BASED   ");
//lcd_putc("\f");
lcd_gotoxy(1,2);
lcd_putc(" TRANSFORMER MON");
delay_ms(5000);
lcd_gotoxy(1,1);
lcd_putc(" BOOTING MODEM  ");
lcd_gotoxy(1,2);
lcd_putc(" PLEASE WAIT. . ");
delay_ms(5000);
lcd_gotoxy(1,1);
lcd_putc("  MODEM READY!! ");
lcd_gotoxy(1,2);
lcd_putc("                ");
delay_ms(2000);   
lcd_putc("\f"); 
RELAY=1;

lcd_putc("\f");
//BUZ = 0;l
while(TRUE)
  {    
   
          
         
         setup_adc_ports(sAN0);
         setup_adc(ADC_CLOCK_DIV_8);      
         delay_ms(10);
         set_adc_channel(0);
         delay_ms(10);
         temperature=read_adc();
         delay_ms(10);
         
         setup_adc_ports(sAN1);
         delay_ms(10);
         setup_adc(ADC_CLOCK_DIV_8);      
         delay_ms(10);
         set_adc_channel(1);
         delay_ms(10);
         load=read_adc();
         delay_ms(10);
        
        
        
        
         temperature/=2;
         delay_ms(10);
         
         load*=100;
         delay_ms(10);
         load/=1023;
         delay_ms(10);
         
         t=temperature;
         l=load;
         
         lcd_gotoxy(1,1);
         lcd_putc("TEMPERATURE LOAD");
         lcd_gotoxy(4,2); 
         printf(lcd_putc,"%LU'C ",t);   
         lcd_gotoxy(13,2); 
         printf(lcd_putc,"%LUKW    ",l);   
         
         
         if(t>40)
         {
         lcd_gotoxy(1,1);
         lcd_putc("ALERT HIGH TEMP ");
         lcd_gotoxy(1,2);
         lcd_putc(" IN TRANSFORMER ");
         delay_ms(3000);
         lcd_gotoxy(1,1);
         lcd_putc(" ISOLATING LOAD ");
         lcd_gotoxy(1,2);
         lcd_putc("FROM TRANSFORMER");
         delay_ms(3000);
         RELAY=0;
                  
         lcd_gotoxy(1,1);
         lcd_putc(" SMS SENDING TO ");
         lcd_gotoxy(1,2);
         lcd_putc("  REGISTERED NO ");
         delay_ms(1000);
        
         printf("AT");
         putc(13);
         putc(10);
         delay_ms(1000);
         printf("AT+CMGF=1");
         putc(13);
         putc(10);
         delay_ms(1000); 
         puts("AT+CMGS=\"8754214031\"");
         putc(13);
         putc(10);
         delay_ms(5000);
         
         printf("ALERT!!! HIGH TEMPERATURE DETECTED IN TRANSFORMER");  
         putc(13);
         putc(10);
         printf("LOADS DISCONNECTED AUTOMATICALLY");  
         putc(13);
         putc(10);
         printf("https://iot-project24.000webhostapp.com/transformer.html");  
         putc(13);
         putc(10);
         
         putc(26);
         delay_ms(7000);
         
         lcd_gotoxy(1,1);
         lcd_putc("    SMS SENT    ");
         lcd_gotoxy(1,2);
         lcd_putc("  SUCCESSFULLY! ");
         delay_ms(3000);
        
         lcd_putc("\f");
         }
         
         
         if(l>80)
         {
         lcd_gotoxy(1,1);
         lcd_putc("ALERT OVER LOAD ");
         lcd_gotoxy(1,2);
         lcd_putc(" IN TRANSFORMER ");
         delay_ms(3000);
         lcd_gotoxy(1,1);
         lcd_putc(" ISOLATING LOAD ");
         lcd_gotoxy(1,2);
         lcd_putc("FROM TRANSFORMER");
         delay_ms(3000);
         RELAY=0;
                  
         lcd_gotoxy(1,1);
         lcd_putc(" SMS SENDING TO ");
         lcd_gotoxy(1,2);
         lcd_putc("  REGISTERED NO ");
         delay_ms(1000);
        
         printf("AT");
         putc(13);
         putc(10);
         delay_ms(1000);
         printf("AT+CMGF=1");
         putc(13);
         putc(10);
         delay_ms(1000); 
         puts("AT+CMGS=\"8754214031\"");
         putc(13);
         putc(10);
         delay_ms(5000);
         
         printf("ALERT!!! OVER LOAD DETECTED IN TRANSFORMER");  
         putc(13);
         putc(10);
         printf("LOADS DISCONNECTED AUTOMATICALLY");  
         putc(13);
         putc(10);
         printf("https://iot-project24.000webhostapp.com/transformer.html");  
         putc(13);
         putc(10);
         
         putc(26);
         delay_ms(7000);
         
         lcd_gotoxy(1,1);
         lcd_putc("    SMS SENT    ");
         lcd_gotoxy(1,2);
         lcd_putc("  SUCCESSFULLY! ");
         delay_ms(3000);
        
         lcd_putc("\f");
         }
         
        
         
   delay_ms(1000);
  }
}
 // flex_lcd.c

// These pins are for the Microchip PicDem2-Plus board,
// which is what I used to test the driver.  Change these
// pins to fit your own board.

#define LCD_DB4   PIN_D4
#define LCD_DB5   PIN_D5
#define LCD_DB6   PIN_D6
#define LCD_DB7   PIN_D7

#define LCD_E     PIN_C5
#define LCD_RS    PIN_C4
//#define LCD_RW    PIN_D2

// If you only want a 6-pin interface to your LCD, then
// connect the R/W pin on the LCD to ground, and comment
// out the following line.

//#define USE_LCD_RW   1     

//========================================

#define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines
#define lcd_line_two 0x40 // LCD RAM address for the 2nd line


int8 const LCD_INIT_STRING[4] =
{
 0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots
 0xc,                    // Display on
 1,                      // Clear display
 6                       // Increment cursor
 };


//-------------------------------------
void lcd_send_nibble(int8 nibble)
{
// Note:  !! converts an integer expression
// to a boolean (1 or 0).
 output_bit(LCD_DB4, !!(nibble & 1));
 output_bit(LCD_DB5, !!(nibble & 2)); 
 output_bit(LCD_DB6, !!(nibble & 4));   
 output_bit(LCD_DB7, !!(nibble & 8));   

 delay_cycles(1);
 output_high(LCD_E);
 delay_us(2);
 output_low(LCD_E);
}

//-----------------------------------
// This sub-routine is only called by lcd_read_byte().
// It's not a stand-alone routine.  For example, the
// R/W signal is set high by lcd_read_byte() before
// this routine is called.     

#ifdef USE_LCD_RW
int8 lcd_read_nibble(void)
{
int8 retval;
// Create bit variables so that we can easily set
// individual bits in the retval variable.
#bit retval_0 = retval.0
#bit retval_1 = retval.1
#bit retval_2 = retval.2
#bit retval_3 = retval.3

retval = 0;

output_high(LCD_E);
delay_cycles(1);

retval_0 = input(LCD_DB4);
retval_1 = input(LCD_DB5);
retval_2 = input(LCD_DB6);
retval_3 = input(LCD_DB7);

output_low(LCD_E);

return(retval);   
}   
#endif

//---------------------------------------
// Read a byte from the LCD and return it.

#ifdef USE_LCD_RW
int8 lcd_read_byte(void)
{
int8 low;
int8 high;

output_high(LCD_RW);
delay_cycles(1);

high = lcd_read_nibble();

low = lcd_read_nibble();

return( (high<<4) | low);
}
#endif

//----------------------------------------
// Send a byte to the LCD.
void lcd_send_byte(int8 address, int8 n)
{
output_low(LCD_RS);

#ifdef USE_LCD_RW
while(bit_test(lcd_read_byte(),7)) ;
#else
delay_us(60); 
#endif

if(address)
   output_high(LCD_RS);
else
   output_low(LCD_RS);

 delay_cycles(1);

#ifdef USE_LCD_RW
output_low(LCD_RW);
delay_cycles(1);
#endif

output_low(LCD_E);

lcd_send_nibble(n >> 4);
lcd_send_nibble(n & 0xf);
}

//----------------------------
void lcd_init(void)
{
int8 i;

output_low(LCD_RS);

#ifdef USE_LCD_RW
output_low(LCD_RW);
#endif

output_low(LCD_E);

delay_ms(15);

for(i=0 ;i < 3; i++)
   {
    lcd_send_nibble(0x03);
    delay_ms(5);
   }

lcd_send_nibble(0x02);

for(i=0; i < sizeof(LCD_INIT_STRING); i++)
   {
    lcd_send_byte(0, LCD_INIT_STRING[i]);

    // If the R/W signal is not used, then
    // the busy bit can't be polled.  One of
    // the init commands takes longer than
    // the hard-coded delay of 60 us, so in
    // that case, lets just do a 5 ms delay
    // after all four of them.
    #ifndef USE_LCD_RW
    delay_ms(5);
    #endif
   }

}

//----------------------------

void lcd_gotoxy(int8 x, int8 y)
{
int8 address;

if(y != 1)
   address = lcd_line_two;
else
   address=0;

address += x-1;
lcd_send_byte(0, 0x80 | address);
}

//-----------------------------
void lcd_putc(char c)
{
 switch(c)
   {
    case '\f':
      lcd_send_byte(0,1);
      delay_ms(2);
      break;

    case '\n':
       lcd_gotoxy(1,2);
       break;

    case '\b':
       lcd_send_byte(0,0x10);
       break;

    default:
       lcd_send_byte(1,c);
       break;
   }
}

//------------------------------
#ifdef USE_LCD_RW
char lcd_getc(int8 x, int8 y)
{
char value;

lcd_gotoxy(x,y);

// Wait until busy flag is low.
while(bit_test(lcd_read_byte(),7)); 

output_high(LCD_RS);
value = lcd_read_byte();
output_low(lcd_RS);

return(value);
}
#endif

